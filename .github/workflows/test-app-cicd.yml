# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Java
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # Use Temurin JDK
          java-version: '17' # Specify your project's Java version

      # Cache Maven dependencies (optional, for Maven projects)
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Build the project
      - name: Build with Maven
        run: mvn clean install
  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Java
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Start Selenium server (for Selenium Grid or local server, if needed)
      - name: Start Selenium Server (Optional)
        run: |
          docker run -d -p 4444:4444 --name selenium-hub selenium/standalone-chrome:latest

      # Run Selenium Tests
      - name: Run Selenium Tests
        run: mvn test

      # Stop Selenium server
      - name: Stop Selenium Server (Optional)
        if: always()
        run: |
          docker stop selenium-hub
          docker rm selenium-hub
  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Java
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17' # Adjust based on your project's requirement
      # Step 3: Build the Spring Boot application
      - name: Grant execute permission to Maven wrapper
        run: chmod +x ./mvnw

      # Step 4: Build the Spring Boot application
      - name: Build application
        run: |
          ./mvnw clean package -DskipTests

      # Step 5: Run the application in the background
      - name: Run Spring Boot application
        run: |
          nohup java -jar target/*.jar > app.log 2>&1 &
          echo $! > app.pid

      # Step 6: Verify the application is running
      - name: Verify application is running
        run: |
          sleep 10 # Wait for the application to start
          curl -v http://localhost:8080 || (echo "Application failed to start" && exit 1)

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # Step: Expose API using localhost.run
      - name: Expose API using localhost.run
        run: |
          ssh -R 80:localhost:8080 ssh.localhost.run > localhost-run.log &
          sleep 5
          grep -o 'https://.*.localhost.run' localhost-run.log > api-url.txt
          echo "Public API URL: $(cat api-url.txt)"

      # Step 7: Optionally, tail the logs (for debugging)
      - name: Tail application logs
        if: failure()
        run: cat app.log